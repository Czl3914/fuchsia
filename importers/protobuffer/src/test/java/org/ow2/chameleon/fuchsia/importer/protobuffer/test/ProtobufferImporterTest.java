package org.ow2.chameleon.fuchsia.importer.protobuffer.test;

import com.google.code.cxf.protobuf.client.SimpleRpcController;
import com.google.protobuf.RpcCallback;
import junit.framework.Assert;
import org.junit.Test;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.osgi.framework.ServiceRegistration;
import org.osgi.service.packageadmin.PackageAdmin;
import org.ow2.chameleon.fuchsia.core.declaration.ImportDeclaration;
import org.ow2.chameleon.fuchsia.core.exceptions.BinderException;
import org.ow2.chameleon.fuchsia.importer.protobuffer.ProtobufferImporter;
import org.ow2.chameleon.fuchsia.importer.protobuffer.internal.ProtobufferImporterPojo;
import org.ow2.chameleon.fuchsia.importer.protobuffer.test.base.ProtobufferImporterAbstractTest;
import org.ow2.chameleon.fuchsia.importer.protobuffer.test.ctd.AddressBookProtos;

import java.util.Dictionary;
import java.util.Map;

import static org.fest.reflect.core.Reflection.field;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

public class ProtobufferImporterTest extends ProtobufferImporterAbstractTest {

    public void registerMockitoMockInterception(){

        when(context.getServiceReference(PackageAdmin.class.getName())).thenReturn(importerServiceRegistration);
        when(packageAdminMock.getExportedPackage(id.getClass().getName())).thenReturn(importPackageForClass);
        when(context.getService(importerServiceRegistration)).thenReturn(packageAdminMock);
        when(context.getBundle()).thenReturn(bundeToLoadClassFrom);
        when(importerServiceRegistration.getProperty(org.osgi.framework.Constants.SERVICE_ID)).thenReturn(1l);
        when(context.registerService(any(Class.class), any(id.getClass()), any(Dictionary.class))).thenReturn(proxyServiceRegistration);

        try {
            when(bundeToLoadClassFrom.loadClass(anyString())).thenAnswer(new Answer<Class>() {
                public Class answer(InvocationOnMock invocation) throws Throwable {
                    return Thread.currentThread().getContextClassLoader().loadClass((String) invocation.getArguments()[0]);
                }
            });

            //Recovers from the local proxy generated by the importer in order to perform calls and test it
            when(context.registerService(anyString(), anyObject(), any(Dictionary.class))).thenAnswer(new Answer<ServiceRegistration>() {
                public ServiceRegistration answer(InvocationOnMock invocationOnMock) throws Throwable {
                    proxyService =(AddressBookProtos.AddressBookService)invocationOnMock.getArguments()[1];
                    return proxyServiceRegistration;
                }
            });

        }  catch (ClassNotFoundException e) {
            e.printStackTrace();
        }

        importer=spy(new ProtobufferImporter(context));

    }

    @Test
    public void testValidDeclarationExceptionThrown() throws Exception {

        try {
            ImportDeclaration declaration=getValidImportDeclaration();
            importer.useDeclaration(declaration);
        }catch(BinderException be){
            Assert.fail("A BinderException should NOT have been thrown since not all information were provided");
        }

    }

    @Test
    public void testInvalidDeclarationExceptionThrown() throws Exception {

        try {
            ImportDeclaration declaration=getInvalidImportDeclaration();
            importer.useDeclaration(declaration);
            Assert.fail("A BinderException should have been thrown since not all information required were provided");
        }catch(BinderException be){
            //An exception for this case is normal, since not all information were provided
        }

    }

    @Test
    public void testImportDeclaration() throws Exception {
        ImportDeclaration declaration=getValidImportDeclaration();
        ProtobufferImporterPojo pojo=ProtobufferImporterPojo.create(declaration);

        importer.start();

        startServer(pojo);

        importer.useDeclaration(declaration);

        SimpleRpcController controller = new SimpleRpcController();

        final AddressBookProtos.Person.Builder personAlice = AddressBookProtos.Person.newBuilder();
        AddressBookProtos.Person alice = personAlice.setId(1).setName("Alice").build();

        proxyService.addPerson(controller, alice, new RpcCallback<AddressBookProtos.AddressBookSize>() {
            public void run(AddressBookProtos.AddressBookSize size) {
                Assert.assertEquals(1, size.getSize());
            }
        });

        controller.reset();
        proxyService.listPeople(controller, AddressBookProtos.NamePattern.newBuilder().setPattern("A")
                .build(), new RpcCallback<AddressBookProtos.AddressBook>() {
            public void run(AddressBookProtos.AddressBook response) {
                Assert.assertEquals(1, response.getPersonList().size());
                for (AddressBookProtos.Person personIt : response.getPersonList()) {
                    Assert.assertEquals(personIt.getName(), personAlice.getName());
                }
            }
        });

        importer.stop();

        stopServer();

    }


    @Test
    public void testCleanupAfterStop() throws Exception {

        ImportDeclaration declaration=getValidImportDeclaration();
        ProtobufferImporterPojo pojo=ProtobufferImporterPojo.create(declaration);

        importer.start();

        startServer(pojo);

        importer.useDeclaration(declaration);

        Map<String,ServiceRegistration> registeredImporters=field("registeredImporter").ofType(Map.class).in(importer).get();

        Assert.assertEquals(1,registeredImporters.size());

        importer.stop();

        Assert.assertEquals(0,registeredImporters.size());

        stopServer();

    }

}
